---

import type { CollectionEntry } from 'astro:content';

interface Props {
  projetos: CollectionEntry<'projetos'>[];
}

const { projetos } = Astro.props;

const categorias = ['Todos', ...new Set(projetos.map(p => p.data.categoria))];
---

<section class="laboratorio-section">
  <div class="laboratorio-header">
    <h2 class="titulo-secao"># Laboratório</h2>
    <div class="filtros">
      {categorias.map(categoria => (
        <button class:list={["filtro-btn", {ativo: categoria === 'Todos'}]} data-categoria={categoria.toLowerCase()}>
          {categoria}
        </button>
      ))}
    </div>
  </div>

  <div class="projetos-container">
    {projetos.map(projeto => (
      <a href={`/projetos/${projeto.slug}`} class="projeto-card" data-categoria={projeto.data.categoria.toLowerCase()}>
        <img src={projeto.data.imagem} alt={`Imagem do projeto ${projeto.data.titulo}`} class="projeto-imagem" />
        <div class="projeto-info">
          <h3>{projeto.data.titulo}</h3>
          
          {}
          <p>{projeto.data.resumo}</p>
          
          <div class="projeto-tags">
            {projeto.data.tags.map((tag: string) => (
              <span class="tag">{tag}</span>
            ))}
          </div>
        </div>
      </a>
    ))}
  </div>
</section>

<script>
   const botoesFiltro = document.querySelectorAll('.filtro-btn');
  const cardsProjeto = document.querySelectorAll<HTMLElement>('.projeto-card');

  function filtrarProjetos(categoriaSelecionada: string) {
    cardsProjeto.forEach(card => {
      const categoriaCard = card.getAttribute('data-categoria');
      if (categoriaSelecionada === 'todos' || categoriaSelecionada === categoriaCard) {
        card.classList.remove('hidden');
      } else {
        card.classList.add('hidden');
      }
    });

    botoesFiltro.forEach(btn => {
      if (btn.getAttribute('data-categoria') === categoriaSelecionada) {
        btn.classList.add('ativo');
      } else {
        btn.classList.remove('ativo');
      }
    });
  }

  botoesFiltro.forEach(botao => {
    botao.addEventListener('click', (event) => {
      event.preventDefault();
      const categoria = botao.getAttribute('data-categoria');
      if (categoria) {
        filtrarProjetos(categoria);
        // Opcional: atualiza a URL sem recarregar a página
        const novaUrl = new URL(window.location.href);
        novaUrl.searchParams.set('categoria', categoria);
        window.history.pushState({}, '', novaUrl);
      }
    });
  });

  // --- NOVO CÓDIGO AQUI ---
  // Verifica se existe um filtro na URL quando a página carrega
  document.addEventListener('DOMContentLoaded', () => {
    const params = new URLSearchParams(window.location.search);
    const categoriaUrl = params.get('categoria');
    
    if (categoriaUrl) {
      // Se encontrou uma categoria na URL, aplica o filtro
      filtrarProjetos(categoriaUrl);
    }
  });

</script>

<style>
  .laboratorio-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 24px;
    flex-wrap: wrap;
    gap: 16px;
  }
  .titulo-secao {
    color: var(--cor-destaque);
    font-weight: 500;
    margin: 0;
  }
  .filtros {
    display: flex;
    gap: 12px;
  }
  .filtro-btn {
    background-color: transparent;
    border: 1px solid #374151;
    color: var(--cor-texto-secundario);
    padding: 8px 16px;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s;
  }
  .filtro-btn:hover {
    background-color: #374151;
    color: var(--cor-texto-principal);
  }
  .filtro-btn.ativo {
    background-color: var(--cor-destaque);
    color: var(--cor-fundo);
    border-color: var(--cor-destaque);
  }

  .projetos-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 30px;
  }
  
  .projeto-card {
    background-color: var(--cor-fundo-secundario);
    border-radius: 8px;
    overflow: hidden;
    text-decoration: none;
    color: var(--cor-texto-principal);
    display: block;
    transition: transform 0.3s ease, box-shadow 0.3s ease, opacity 0.4s ease, max-height 0.6s ease-in-out;
  }

  
  .projeto-card.hidden {
    opacity: 0;
    transform: scale(0.95);
    max-height: 0;
    padding-top: 0;
    padding-bottom: 0;
    margin-bottom: -30px; 
    overflow: hidden;
    pointer-events: none; 
  }

  .projeto-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0,0,0,0.2);
  }
  
  .projeto-imagem {
    width: 100%;
    height: 200px;
    object-fit: cover;
    transition: transform 0.4s ease;
  }
  
  .projeto-card:hover .projeto-imagem {
    transform: scale(1.05);
  }
  
  .projeto-info {
    padding: 20px;
  }
  
  .projeto-info h3 {
    margin: 0 0 8px 0;
    font-size: 1.2rem;
  }
  
  .projeto-info p {
    margin: 0 0 16px 0;
    color: var(--cor-texto-secundario);
    font-size: 0.9rem;
    line-height: 1.6;
    
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    min-height: 54px; 
  }
  
  .projeto-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }
  
  .tag {
    background-color: var(--cor-destaque);
    color: var(--cor-fundo);
    padding: 4px 10px;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
    transition: transform 0.3s ease;
  }

  .projeto-card:hover .tag {
    transform: translateY(-2px);
  }
</style>